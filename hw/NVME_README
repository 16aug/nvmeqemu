/*
 * INTEL CONFIDENTIAL
 * Copyright 2011 - 2011 Intel Corporation All Rights Reserved.
 * The source code contained or described herein and all documents related to
 * the source code ("Material") are owned by Intel Corporation or its
 * suppliers or licensors. Title to the Material remains with Intel Corporation
 * or its suppliers and licensors. The Material contains trade secrets and
 * proprietary and confidential information of Intel or its suppliers and
 * licensors. The Material is protected by worldwide copyright and trade secret
 * laws and treaty provisions. No part of the Material may be used, copied,
 * reproduced, modified, published, uploaded, posted, transmitted, distributed,
 * or disclosed in any way without Intel's prior express written permission.
 * No license under any patent, copyright, trade secret or other intellectual
 * property right is granted to or conferred upon you by disclosure or delivery
 * of the Materials, either expressly, by implication, inducement, estoppel or
 * otherwise. Any license under such intellectual property rights must be
 * express and approved by Intel in writing.
 */

1. Introduction
2. How to compile Qemu with NVME support.
3. Make a virtual HD for QEMU
4. Locate and download a Linux based 64b OS to virtualize
5. Install the chosen virtualized OS to the virtual HD
6. Boot the virtual machine from the virtual HD
7. Performance notes
8. Usage Notes


Qemu for NVME.

1. Introduction.

To get more details about Qemu visit Qemu official website:
http://wiki.qemu.org/Main_Page

To clone Qemu with support for NVME clone source code from:
http://dcgshare.lm.intel.com/gitweb/?p=nvme/qemu.git;a=summary

To clone files with various shell scripts for running the Qemu:
http://dcgshare.lm.intel.com/gitweb/?p=nvme/manage.git;a=summary

2. How to compile Qemu with NVME support.
    1. Clone git repository.
    2. Assume You are using 64 bit environment and 64 bit Linux kernel
    3. Execute the shell script nvme/manage/buildqmu.sh
       If the script fails during the “.configure” operation you may need additional libraries installed. For Ubuntu 10.10 Server 64b the following had to be performed.
           sudo apt-get install linux-headers-2.6.35-22-server
           sudo apt-get install zlib1g-dev
           sudo apt-get install libsdl-dev
           sudo apt-get install libaio-dev
    4. The resulting executable is nvme/qemu/x86_64-softmnu/qemu-system-x86_64/qemu-system-x86_64

3. Make a virtual HD for QEMU
    1. Execute the shell script nvme/manage/vdiskcreate.sh

4. Locate and download a Linux based 64b OS to virtualize
    1. mkdir nvme/manage/vkernel
    2. Download the iso file into directory nvme/manage/vkernel

5. Install the chosen virtualized OS to the virtual HD
    1. cd nvme/manage
    2. ./runqmu.sh <your_virtual_HD_filename> <your_iso_image_filename> -boot d
           A terminal windows should launch into view booting from the supplied ISO file.
           Follow through the usual actions to install the OS onto the virtual HD.
           Feel free to partition/format/re-initialize virtual HD as necessary.
           At the end of a successful installation reboot the virtual machine. The machine won't actually reboot, but it will stop all daemons and execute down to run level 1.
           At this point simply close the QEMU terminal window.

6. Boot the virtual machine from the virtual HD
    1. cd nvme/manage
    2. ./runqmu.sh <your_virtual_HD_filename>

7. Performance notes
    1. Consider adding the following switches when invoking configure:
    --enable-io-thread --enable-linux-aio
    2. Consider adding the following switches when invoking qemu:
    --enable-kvm -smp 2

8. Usage Notes
    1. Config Files
           NVME module of Qemu uses two device config files called "NVME_device_PCI_config" and "NVME_device_NVME_config" located inside the /qemu/hw directory.
           They basically enable the user to set up the intial values in both the PCI and NVME config space.
           These file names are unique and thus there should not be multiple files with the above names inside the directory and sub-directories from where the qemu is run by executing
           ./runqmu.sh <your_virtual_HD_filename>
           Program should be executed from an higher level directory so that both the config files are available in either the directory itself or its subdirectories.